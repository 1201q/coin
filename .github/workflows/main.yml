name: coin
on:
  push:
    branches: ["main"]
    paths:
      - "apps/server/**"
jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{secrets.DOCKERHUB_TOKEN}}

      - name: Build and release to DockerHub
        run: |
          docker buildx create --use
          docker buildx build --platform linux/amd64,linux/arm64 \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/coin:latest \
            --push ./apps/server

      - name: Send files
        uses: appleboy/scp-action@master
        with:
          host: ${{secrets.SSH_HOST}}
          username: ${{secrets.SSH_USERNAME}}
          key: ${{secrets.SSH_KEY}}
          port: ${{secrets.SSH_PORT}}
          source: "nginx.conf, docker-compose.yml"
          target: /home/ubuntu/coin
          overwrite: true

      - name: Deploy to BE server
        uses: appleboy/ssh-action@master
        with:
          host: ${{secrets.SSH_HOST}}
          username: ${{secrets.SSH_USERNAME}}
          key: ${{secrets.SSH_KEY}}
          port: ${{secrets.SSH_PORT}}
          script: |
            cd /home/ubuntu/coin
            sudo su
            docker system prune -f
            echo "TEST_ENV=${{secrets.TEST_ENV}}" > .env
            echo "TEST_ENV2=${{secrets.TEST_ENV2}}" >> .env
            echo "GOOGLE_CLIENT_ID=${{secrets.GOOGLE_CLIENT_ID}}" >> .env
            echo "GOOGLE_CLIENT_SECRET=${{secrets.GOOGLE_CLIENT_SECRET}}" >> .env
            echo "GOOGLE_OAUTH_CALLBACK_URL=${{secrets.GOOGLE_OAUTH_CALLBACK_URL}}" >> .env
            echo "JWT_SECRET=${{secrets.JWT_SECRET}}" >> .env
            echo "DB_USERNAME=${{secrets.DB_USERNAME}}" >> .env
            echo "DB_PASSWORD=${{secrets.DB_PASSWORD}}" >> .env
            echo "DB_CONNECTION=${{secrets.DB_CONNECTION}}" >> .env
            echo "JWT_REFRESH_SECRET=${{secrets.JWT_REFRESH_SECRET}}" >> .env
            echo "NODE_ENV=${{secrets.NODE_ENV}}" >> .env
            docker compose down
            docker compose pull
            docker compose up -d --build
